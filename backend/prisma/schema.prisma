generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Curso {
  idCurso          Int           @id @default(autoincrement()) @map("id_curso")
  nombreCortoCurso String        @map("nombre_corto_curso") @db.VarChar(100)
  nombreCurso      String        @map("nombre_curso") @db.VarChar(100)
  modalidadCurso   String        @map("modalidad_curso") @db.VarChar(50)
  descripcionCurso String        @map("descripcion_curso")
  valorCurso       Decimal       @map("valor_curso") @db.Decimal(10, 2)
  fechaInicioCurso DateTime      @map("fecha_inicio_curso") @db.Date
  fechaFinCurso    DateTime      @map("fecha_fin_curso") @db.Date

  //relaciones
  inscripciones    Inscripcion[]
  cursoMoodle      CursoMoodle?
  grupoTelegram    GrupoTelegram?

  @@map("curso")
}

model DatosPersonales {
  idPersona       Int           @id @default(autoincrement()) @map("id_persona")
  ciPasaporte     String        @unique @map("ci_pasaporte") @db.VarChar(20)
  nombres         String        @map("nombres") @db.VarChar(100)
  apellidos       String        @map("apellidos") @db.VarChar(100)
  numTelefono     String        @map("num_telefono") @db.VarChar(15)
  correo          String        @unique @map("correo") @db.VarChar(100)
  pais            String        @map("pais") @db.VarChar(30)
  provinciaEstado String        @map("provincia_estado") @db.VarChar(50)
  ciudad          String        @map("ciudad") @db.VarChar(100)
  profesion       String        @map("profesion") @db.VarChar(100)
  institucion     String        @map("institucion") @db.VarChar(100)

  //relaciones
  inscripciones   Inscripcion[]

  @@map("datos_personales")
}

model Descuento {
  idDescuento          Int           @id @default(autoincrement()) @map("id_descuento")
  tipoDescuento        String        @map("tipo_descuento") @db.VarChar(100)
  valorDescuento       Decimal       @map("valor_descuento") @db.Decimal(5, 2)
  porcentajeDescuento  Decimal       @map("porcentaje_descuento") @db.Decimal(5, 2)
  descripcionDescuento String        @map("descripcion_descuento")

  //relaciones
  inscripciones        Inscripcion[]

  @@map("descuento")
}

model DatosFacturacion {
  idFacturacion            Int           @id @default(autoincrement()) @map("id_facturacion")
  razonSocial              String        @map("razon_social") @db.VarChar(100)
  identificacionTributaria String        @unique @map("identificacion_tributaria") @db.VarChar(50)
  telefono                 String        @map("telefono") @db.VarChar(20)
  correoFactura            String        @unique @map("correo_factura") @db.VarChar(100)
  direccion                String        @map("direccion") @db.VarChar(250)

  //relaciones
  facturas                 Factura[]
  inscripciones            Inscripcion[]

  @@map("datos_facturacion")
}

model Inscripcion {
  idInscripcion    Int              @id @default(autoincrement()) @map("id_inscripcion")
  idCurso          Int              @map("id_curso")
  idPersona        Int              @map("id_persona")
  idDescuento      Int?             @map("id_descuento")
  idFacturacion    Int              @map("id_facturacion")
  idComprobante    Int              @unique @map("id_comprobante")
  matricula        Boolean          @default(false) @map("matricula")
  fechaInscripcion DateTime         @default(now()) @map("fecha_inscripcion") @db.Timestamp(6)
  
  //relaciones
  facturas         Factura[]
  comprobante      Comprobante      @relation(fields: [idComprobante], references: [idComprobante], onUpdate: Restrict)
  curso            Curso            @relation(fields: [idCurso], references: [idCurso], onUpdate: Restrict)
  descuento        Descuento?       @relation(fields: [idDescuento], references: [idDescuento], onUpdate: Restrict)
  datosFacturacion DatosFacturacion @relation(fields: [idFacturacion], references: [idFacturacion], onUpdate: Restrict)
  persona          DatosPersonales  @relation(fields: [idPersona], references: [idPersona], onUpdate: Restrict)
  inscripcionMoodle InscripcionMoodle?

  @@map("inscripcion")
}

model Factura {
  idFactura        Int              @id @default(autoincrement()) @map("id_factura")
  idInscripcion    Int              @map("id_inscripcion")
  idFacturacion    Int              @map("id_facturacion")
  valorPagado      Decimal          @map("valor_pagado") @db.Decimal(10, 2)
  verificacionPago Boolean          @default(false) @map("verificacion_pago")
  numeroIngreso    String           @unique @map("numero_ingreso") @db.VarChar(100)
  numeroFactura    String           @unique @map("numero_factura") @db.VarChar(100) 

  //relaciones
  datosFacturacion DatosFacturacion @relation(fields: [idFacturacion], references: [idFacturacion], onUpdate: Restrict)
  inscripcion      Inscripcion      @relation(fields: [idInscripcion], references: [idInscripcion], onUpdate: Restrict)

  @@map("factura")
}

model Comprobante {
  idComprobante   Int          @id @default(autoincrement()) @map("id_comprobante")
  fechaSubida     DateTime     @default(now()) @map("fecha_subida") @db.Timestamp(6)
  rutaComprobante String       @map("ruta_comprobante") @db.VarChar(250)
  tipoArchivo     String       @map("tipo_archivo") @db.VarChar(50)
  nombreArchivo   String       @map("nombre_archivo") @db.VarChar(100)

  //relaciones
  inscripcion     Inscripcion?

  @@map("comprobante")
}

model Usuario {
  idUsuario         Int       @id @default(autoincrement()) @map("id_usuario")
  email             String    @unique @map("email") @db.VarChar(100)
  password          String    @map("password") @db.VarChar(255)
  nombres           String    @map("nombres") @db.VarChar(100)
  apellidos         String    @map("apellidos") @db.VarChar(100)
  activo            Boolean   @default(true) @map("activo")
  fechaCreacion     DateTime  @default(now()) @map("fecha_creacion") @db.Timestamp(6)
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion") @db.Timestamp(6)
  ultimoAcceso      DateTime? @map("ultimo_acceso") @db.Timestamp(6)
  
  // Relaciones
  roles             UsuarioRol[]
  sesiones          SesionUsuario[]
  
  @@map("usuario")
}

model Rol {
  idRol             Int       @id @default(autoincrement()) @map("id_rol")
  nombreRol         String    @unique @map("nombre_rol") @db.VarChar(50)
  descripcionRol    String    @map("descripcion_rol") @db.VarChar(255)
  activo            Boolean   @default(true) @map("activo")
  fechaCreacion     DateTime  @default(now()) @map("fecha_creacion") @db.Timestamp(6)
  
  // Relaciones
  usuarios          UsuarioRol[]
  permisos          RolPermiso[]
  
  @@map("rol")
}

model UsuarioRol {
  idUsuario         Int      @map("id_usuario")
  idRol             Int      @map("id_rol")
  fechaAsignacion   DateTime @default(now()) @map("fecha_asignacion") @db.Timestamp(6)
  activo            Boolean  @default(true) @map("activo")
  
  // Relaciones
  usuario           Usuario  @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  rol               Rol      @relation(fields: [idRol], references: [idRol], onDelete: Cascade)
  
  @@id([idUsuario, idRol])
  @@map("usuario_rol")
}

model Permiso {
  idPermiso         Int       @id @default(autoincrement()) @map("id_permiso")
  nombrePermiso     String    @unique @map("nombre_permiso") @db.VarChar(100)
  descripcionPermiso String   @map("descripcion_permiso") @db.VarChar(255)
  recurso           String    @map("recurso") @db.VarChar(100) // ej: "cursos", "inscripciones", "usuarios"
  accion            String    @map("accion") @db.VarChar(50)   // ej: "crear", "leer", "actualizar", "eliminar"
  activo            Boolean   @default(true) @map("activo")
  
  // Relaciones
  roles             RolPermiso[]
  
  @@map("permiso")
}

model RolPermiso {
  idRol             Int      @map("id_rol")
  idPermiso         Int      @map("id_permiso")
  fechaAsignacion   DateTime @default(now()) @map("fecha_asignacion") @db.Timestamp(6)
  
  // Relaciones
  rol               Rol      @relation(fields: [idRol], references: [idRol], onDelete: Cascade)
  permiso           Permiso  @relation(fields: [idPermiso], references: [idPermiso], onDelete: Cascade)
  
  @@id([idRol, idPermiso])
  @@map("rol_permiso")
}

model SesionUsuario {
  idSesion          String   @id @default(cuid()) @map("id_sesion")
  idUsuario         Int      @map("id_usuario")
  tokenRefresh      String   @unique @map("token_refresh") @db.VarChar(500)
  fechaCreacion     DateTime @default(now()) @map("fecha_creacion") @db.Timestamp(6)
  fechaExpiracion   DateTime @map("fecha_expiracion") @db.Timestamp(6)
  activo            Boolean  @default(true) @map("activo")
  ipAddress         String?  @map("ip_address") @db.VarChar(45)
  userAgent         String?  @map("user_agent") @db.VarChar(500)
  
  // Relaciones
  usuario           Usuario  @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  
  @@map("sesion_usuario")
}

// ===== NUEVAS TABLAS PARA INTEGRACIONES =====

model CursoMoodle {
  idCursoMoodle     Int      @id @default(autoincrement()) @map("id_curso_moodle")
  idCurso           Int      @unique @map("id_curso")
  moodleCursoId     Int      @map("moodle_curso_id")
  nombreCortoMoodle String   @map("nombre_corto_moodle") @db.VarChar(100)
  fechaCreacion     DateTime @default(now()) @map("fecha_creacion") @db.Timestamp(6)
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion") @db.Timestamp(6)
  activo            Boolean  @default(true) @map("activo")
  
  // Relaciones
  curso             Curso    @relation(fields: [idCurso], references: [idCurso], onDelete: Cascade)
  
  @@map("curso_moodle")
}

model GrupoTelegram {
  idGrupoTelegram   Int      @id @default(autoincrement()) @map("id_grupo_telegram")
  idCurso           Int      @unique @map("id_curso")
  telegramGroupId   String   @map("telegram_group_id") @db.VarChar(50)
  nombreGrupo       String   @map("nombre_grupo") @db.VarChar(200)
  enlaceInvitacion  String   @map("enlace_invitacion") @db.VarChar(500)
  fechaCreacion     DateTime @default(now()) @map("fecha_creacion") @db.Timestamp(6)
  fechaActualizacion DateTime @updatedAt @map("fecha_actualizacion") @db.Timestamp(6)
  activo            Boolean  @default(true) @map("activo")
  
  // Relaciones
  curso             Curso    @relation(fields: [idCurso], references: [idCurso], onDelete: Cascade)
  
  @@map("grupo_telegram")
}

model InscripcionMoodle {
  idInscripcionMoodle Int         @id @default(autoincrement()) @map("id_inscripcion_moodle")
  idInscripcion       Int         @unique @map("id_inscripcion")
  moodleUserId        Int         @map("moodle_user_id")
  moodleUsername      String      @map("moodle_username") @db.VarChar(100)
  estadoMatricula     String      @default("matriculado") @map("estado_matricula") @db.VarChar(50) // "matriculado", "suspendido", "completado"
  fechaMatricula      DateTime    @default(now()) @map("fecha_matricula") @db.Timestamp(6)
  fechaActualizacion  DateTime    @updatedAt @map("fecha_actualizacion") @db.Timestamp(6)
  notas               String?     @map("notas") @db.Text
  
  // Relaciones
  inscripcion         Inscripcion @relation(fields: [idInscripcion], references: [idInscripcion], onDelete: Cascade)
  
  @@map("inscripcion_moodle")
}
